<?php

declare(strict_types=1);

namespace Tests\LighthouseHelpers;

use App\Models\TestItem;
use GraphQL\Error\Error;

class ColorScalarTest extends TestCase
{
    /**
     * A color can be saved
     *
     * @test
     */
    public function a_color_can_be_saved(): void
    {
        $this->graphQL('
            mutation {
                item(name: "Hello there", color: "#aeaeae") {
                    name
                    color
                }
            }
        ')->assertJson(['data' => ['item' => ['name' => 'Hello there', 'color' => '#aeaeae']]]);

        static::assertSame('#aeaeae', TestItem::latest()->first()->color);
    }

    /**
     * An invalid color throws an error
     *
     * @test
     */
    public function an_invalid_color_throws_an_error(): void
    {
        $this->withoutGraphQLExceptionHandling();
        $this->expectException(Error::class);

        $this->graphQL('
            mutation {
                item(name: "Hello there", color: "#KKKKKK") {
                    name
                    color
                }
            }
        ');
    }

    /**
     * Different color types are supported
     *
     * @test
     */
    public function different_color_types_are_supported(): void
    {
        $this->graphQL('
            mutation {
                firstItem: item(name: "Hello there", color: "rgb(53, 182, 163)") {
                    name
                    color
                }
                secondItem: item(name: "Hello there", color: "hsl(171, 55%, 46%)") {
                    name
                    color
                }
            }
        ')->assertJson(['data' => [
            'firstItem' => ['name' => 'Hello there', 'color' => '#35b6a3'],
            'secondItem' => ['name' => 'Hello there', 'color' => '#35b6a2'],
        ]]);

        static::assertSame('rgb(53, 182, 163)', TestItem::latest()->first()->color);
        static::assertSame('hsl(171, 55%, 46%)', TestItem::latest()->offset(1)->first()->color);
    }

    /**
     * Colors can be requested in different formats
     *
     * @test
     */
    public function colors_can_be_requested_in_different_formats(): void
    {
        $this->graphQL('
            mutation {
                item(name: "Hello there", color: "rgb(53, 182, 163)") {
                    name
                    color(format: HSL)
                }
            }
        ')->assertJson(['data' => ['item' => ['name' => 'Hello there', 'color' => 'hsl(171, 55%, 46%)']]]);

        static::assertSame('rgb(53, 182, 163)', TestItem::latest()->first()->color);
    }

    /**
     * Colors can be modified in the response
     *
     * @test
     */
    public function colors_can_be_modified_in_the_response(): void
    {
        $this->graphQL('
            mutation {
                item(name: "Hello there", color: "rgb(53, 182, 163)") {
                    name
                    color
                    lightColor: color(lighten: 0.5)
                    saturatedColor: color(saturate: -0.5)
                    huedColor: color(relativeHue: -100)
                    fixedLightnessColor: color(lightness: 50)
                    fixedSaturationColor: color(saturation: 50)
                    fixedHueColor: color(hue: 100)
                }
            }
        ')->assertJson(['data' => [
            'item' => [
                'name' => 'Hello there',
                'color' => '#35b6a3',
                'lightColor' => '#94e0d5',
                'saturatedColor' => '#54968c',
                'huedColor' => '#9eb635',
                'fixedLightnessColor' => '#39c6b1',
                'fixedSaturationColor' => '#3bb09e',
                'fixedHueColor' => '#60b635',
            ],
        ]]);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setSchema(/* @lang GraphQL */ <<<'SDL'
scalar Color @scalar(class: "LighthouseHelpers\\Scalars\\Color")
type Query
type Mutation {
    item(name: String, color: Color): TestItem! @create(model: "TestItem")
}

type TestItem {
    name: String!
    color: Color @color
}
SDL
        );
    }
}
